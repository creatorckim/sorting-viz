{"version":3,"sources":["SortingAlgorithms/BubbleSort.jsx","SortingAlgorithms/InsertionSort.jsx","SortingAlgorithms/SelectionSort.jsx","SortingAlgorithms/QuickSort.jsx","SortingAlgorithms/MergeSort.jsx","Visualizer/Visualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["BubbleSort","array","turnsArray","unsortedArray","slice","i","length","j","push","temp","InsertionSort","SelectionSort","smallest","sort","turns","low","high","pivot","partition","index","QuickSort","middle","leftArray","rightArray","merge","left","right","newArray","leftIndex","rightIndex","MergeSort","indexArray","useState","React","useEffect","Visualizer","numberOfBars","setNumberOfBars","randomArray","setRandomArray","randomizeArray","arrayDivs","document","getElementsByClassName","x","style","backgroundColor","Math","floor","random","updateSortedArray","algorithm","console","log","firstEl","secondEl","setTimeout","height","id","className","type","min","max","value","onChange","evt","target","valueChange","onClick","map","idx","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mPAsBeA,MAtBf,SAAoBC,GAIhB,IAHA,IAAIC,EAAa,GACbC,EAAgBF,EAAMG,QAEjBC,EAAI,EAAGA,EAAIF,EAAcG,OAAQD,IACtC,IAAK,IAAIE,EAAI,EAAGA,EAAKJ,EAAcG,OAASD,EAAI,EAAIE,IAChD,GAAIJ,EAAcI,GAAKJ,EAAcI,EAAI,GAAI,CACzCL,EAAWM,KAAK,CAACD,EAAI,EAAGA,IACxB,IAAIE,EAAON,EAAcI,GACzBJ,EAAcI,GAAKJ,EAAcI,EAAI,GACrCJ,EAAcI,EAAI,GAAKE,OAEvBP,EAAWM,KAAK,CAACD,EAAGA,EAAI,IAOpC,OAAOL,GCFIQ,MAjBf,SAAuBT,GAGnB,IAFA,IAAIC,EAAa,GACbC,EAAgBF,EAAMG,QACjBC,EAAI,EAAGA,EAAIF,EAAcG,OAAQD,IAAK,CAG3C,IAFA,IAAII,EAAON,EAAcE,GACrBE,EAAIF,EAAI,EACLE,GAAK,GAAKE,GAAQN,EAAcI,IACnCJ,EAAcI,EAAI,GAAKJ,EAAcI,GACrCL,EAAWM,KAAK,CAACD,EAAI,EAAGA,IACxBA,GAAO,EAEXJ,EAAcI,EAAI,GAAKE,EAG3B,OAAOP,GCOIS,MArBf,SAAuBV,GAGnB,IAFA,IAAIC,EAAa,GACbC,EAAgBF,EAAMG,QACjBC,EAAI,EAAGA,EAAIF,EAAcG,OAAS,EAAGD,IAG1C,IADA,IAAIO,EAAWP,EACNE,EAAIF,EAAI,EAAGE,EAAIJ,EAAcG,OAAQC,IAC1C,GAAIJ,EAAcI,IAAMJ,EAAcS,GAAW,CAC7CV,EAAWM,KAAK,CAACD,EAAGF,IADyB,MAEN,CAACF,EAAcI,GAAIJ,EAAcE,IAAvEF,EAAcE,GAF8B,KAE1BF,EAAcI,GAFY,UAI7CL,EAAWM,KAAK,CAACH,EAAGE,IAOhC,OAAOL,GCTX,IAAMW,EAAO,SAAPA,EAAQC,EAAOb,EAAOc,EAAKC,GAC7B,GAAID,EAAMC,EAAM,CACZ,IAAIC,EAAQC,EAAUJ,EAAOb,EAAOc,EAAKC,GACzCH,EAAKC,EAAOb,EAAOc,EAAKE,EAAQ,GAChCJ,EAAKC,EAAOb,EAAOgB,EAAQ,EAAGD,KAIhCE,EAAY,SAACJ,EAAOb,EAAOc,EAAKC,GAIlC,IAHA,IAAIC,EAAQhB,EAAMc,GACdI,EAAQJ,EAEHV,EAAIU,EAAKV,GAAKW,EAAMX,IACzB,GAAIJ,EAAMI,IAAMY,EAAO,CACnB,IAAIR,EAAOR,EAAMkB,GACjBlB,EAAMkB,GAASlB,EAAMI,GACrBJ,EAAMI,GAAKI,EACXK,EAAMN,KAAK,CAACH,EAAGc,IACfA,SAEAL,EAAMN,KAAK,CAACW,EAAOd,IAI3B,IAAII,EAAOR,EAAMkB,EAAQ,GAKzB,OAJAlB,EAAMkB,EAAQ,GAAKlB,EAAMc,GACzBd,EAAMc,GAAON,EACbK,EAAMN,KAAK,CAACW,EAAQ,EAAGJ,IAEhBI,EAAQ,GAGJC,EAzCf,SAAmBnB,GACf,IAAIC,EAAa,GACbC,EAAgBF,EAAMG,QAI1B,OAFAS,EAAKX,EAAYC,EAAe,EAAGA,EAAcG,OAAS,GAEnDJ,GCQX,IAAMW,EAAO,SAAPA,EAAQC,EAAOb,GAEjB,GAAIA,EAAMK,QAAU,EAChB,OAAOL,EAGX,IAAIoB,EAAUpB,EAAMK,OAAS,EACzBgB,EAAarB,EAAMG,MAAM,EAAGiB,GAC5BE,EAAatB,EAAMG,MAAMiB,GAE7B,OAAOG,EAAMV,EAAOD,EAAKC,EAAOQ,GAAYT,EAAKC,EAAOS,KAGtDC,EAAQ,SAACV,EAAOW,EAAMC,GAMxB,IAJA,IAAIC,EAAW,GACXC,EAAY,EACZC,EAAa,EAEVD,EAAYH,EAAKnB,QAAUuB,EAAaH,EAAMpB,QACjD,GAAImB,EAAKG,GAAW,GAAKF,EAAMG,GAAY,GACvCf,EAAMN,KAAK,CAACiB,EAAKG,GAAW,GAAIF,EAAMG,GAAY,KAClDF,EAASnB,KAAKiB,EAAKG,IACnBA,QACG,CACHd,EAAMN,KAAK,CAACkB,EAAMG,GAAY,GAAIJ,EAAKG,GAAW,KAClD,IAAInB,EAAOgB,EAAKG,GAAW,GAC3BH,EAAKG,GAAW,GAAKF,EAAMG,GAAY,GACvCH,EAAMG,GAAY,GAAKpB,EACvBkB,EAASnB,KAAKkB,EAAMG,IACpBA,IAIR,KAAOD,EAAYH,EAAKnB,QACpBQ,EAAMN,KAAK,CAACiB,EAAKG,GAAW,GAAIH,EAAKG,GAAW,KAChDD,EAASnB,KAAKiB,EAAKG,IACnBA,IAGJ,KAAOC,EAAaH,EAAMpB,QACtBQ,EAAMN,KAAK,CAACkB,EAAMG,GAAY,GAAIH,EAAMG,GAAY,KACpDF,EAASnB,KAAKkB,EAAMG,IACpBA,IAIJ,OAAOF,GAIIG,EAjEf,SAAmB7B,GAKf,IAJA,IAAIC,EAAa,GACbC,EAAgBF,EAAMG,QACtB2B,EAAa,GAER1B,EAAI,EAAGA,EAAIF,EAAcG,OAAQD,IACtC0B,EAAW1B,GAAK,CAACA,EAAGF,EAAcE,IAKtC,OAFAQ,EAAKX,EAAY6B,GAEV7B,G,OCJH8B,EAAwBC,IAAxBD,SAAUE,EAAcD,IAAdC,UA6FHC,EA1FI,WACf,MAAwCH,EAAS,IAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACA,EAAsCL,EAAS,IAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KAGAL,GAAU,WACNM,MACD,IAEH,IAIMA,EAAiB,WAEnB,IADA,IAAMC,EAAYC,SAASC,uBAAuB,cACzCC,EAAI,EAAGA,EAAIH,EAAUnC,OAAQsC,IAClCH,EAAUG,GAAGC,MAAMC,gBAAkB,UAGzC,IADA,IAAI7C,EAAQ,GACHI,EAAI,EAAGA,EAAI+B,EAAc/B,IAC9BJ,EAAMO,KAAKuC,KAAKC,MAAuB,IAAhBD,KAAKE,SAAkB,IAElDV,EAAetC,IAGbiD,EAAoB,SAACC,GACvB,IAAIlD,EACJ,OAAQkD,GACJ,IAAK,aACDlD,EAAQD,EAAWsC,GACnB,MACJ,IAAK,gBACDrC,EAAQS,EAAc4B,GACtB,MACJ,IAAK,gBACDrC,EAAQU,EAAc2B,GACtB,MACJ,IAAK,YACDrC,EAAQmB,EAAUkB,GAClB,MACJ,IAAK,YACDrC,EAAQ6B,EAAUQ,GAClB,MACJ,QACIrC,EAAQD,EAAWsC,GAG3Bc,QAAQC,IAAIpD,GAEZ,IADA,IAAMwC,EAAYC,SAASC,uBAAuB,cAvBb,WAwB5BtC,GACL,kBAA2BJ,EAAMI,GAAjC,GAAMiD,EAAN,KAAeC,EAAf,KACgBC,YAAW,WACvB,IAAK,IAAIZ,EAAI,EAAGA,EAAIH,EAAUnC,OAAQsC,IAClCH,EAAUG,GAAGC,MAAMC,gBAAkB,UAEzCL,EAAUa,GAAST,MAAMC,gBAAkB,QAC3CL,EAAUc,GAAUV,MAAMC,gBAAkB,UArDvC,IAsDNzC,GACH,GAAIiD,EAAUC,EACOC,YAAW,WAAO,IAAD,EACwC,CAACf,EAAUc,GAAUV,MAAMY,OAAQhB,EAAUa,GAAST,MAAMY,QAAjIhB,EAAUa,GAAST,MAAMY,OADI,KACIhB,EAAUc,GAAUV,MAAMY,OAD9B,KAE9BhB,EAAUa,GAAST,MAAMC,gBAAkB,QAC3CL,EAAUc,GAAUV,MAAMC,gBAAkB,UA3D3C,IA4DFzC,IAdFA,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAAM,EAA/BA,IAmBb,OACI,sBAAKqD,GAAG,mBAAR,UACI,yBAAQC,UAAU,SAAlB,UACI,6BAAKvB,IACL,uBAAOwB,KAAM,QAAQC,IAAK,IAAIC,IAAK,MAAMC,MAAQ3B,EAAc4B,SAAW,SAACC,IA/DnE,SAACA,GACjB5B,EAAgB4B,EAAIC,OAAOH,OA8DiEI,CAAYF,MAChG,wBAAQP,GAAG,WAAWU,QAAS,WAAO5B,KAAtC,uBACA,wBAAQ4B,QAAS,WAAOlB,EAAkB,eAA1C,wBACA,wBAAQkB,QAAS,WAAOlB,EAAkB,kBAA1C,2BACA,wBAAQkB,QAAS,WAAOlB,EAAkB,kBAA1C,2BACA,wBAAQkB,QAAS,WAAOlB,EAAkB,cAA1C,0BAGJ,qBAAKS,UAAU,kBAAf,SACKrB,EAAY+B,KAAI,SAACN,EAAOO,GAAR,OACjB,qBAAKX,UAAU,aAAuBd,MAAO,CAACY,OAAO,GAAD,OAAKM,EAAL,OAAnBO,YCjFlCC,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,EAAD,OCMSa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzC,SAAS0C,eAAe,SAM1BZ,M","file":"static/js/main.d498c8e2.chunk.js","sourcesContent":["function BubbleSort(array) {\n    let turnsArray = [];\n    let unsortedArray = array.slice();\n    \n    for (let i = 0; i < unsortedArray.length; i++) {\n        for (let j = 0; j < (unsortedArray.length - i - 1); j++) {\n            if (unsortedArray[j] > unsortedArray[j + 1]) {\n                turnsArray.push([j + 1, j]);\n                let temp = unsortedArray[j];\n                unsortedArray[j] = unsortedArray[j + 1];\n                unsortedArray[j + 1] = temp;\n            } else {\n                turnsArray.push([j, j + 1]);\n\n            }\n\n        }\n    }\n\n    return turnsArray;\n}\n\nexport default BubbleSort;","function InsertionSort(array) {\n    let turnsArray = [];\n    let unsortedArray = array.slice();\n    for (let i = 1; i < unsortedArray.length; i++) {\n        let temp = unsortedArray[i];\n        let j = i - 1;\n        while (j >= 0 && temp <= unsortedArray[j]) {\n            unsortedArray[j + 1] = unsortedArray[j];\n            turnsArray.push([j + 1, j]);\n            j = j -1;\n        }\n        unsortedArray[j + 1] = temp;\n    }\n\n    return turnsArray;\n}\n\nexport default InsertionSort;","function SelectionSort(array) {\n    let turnsArray = [];\n    let unsortedArray = array.slice();\n    for (let i = 0; i < unsortedArray.length - 1; i++) {\n\n        let smallest = i;\n        for (let j = i + 1; j < unsortedArray.length; j++) {\n            if (unsortedArray[j] <= unsortedArray[smallest]) {\n                turnsArray.push([j, i]);\n                [unsortedArray[i], unsortedArray[j]] = [unsortedArray[j], unsortedArray[i]];\n            } else {\n                turnsArray.push([i, j]);\n            }\n\n        }\n\n    }\n\n    return turnsArray;\n}\n\nexport default SelectionSort;","function QuickSort(array) {\n    let turnsArray = [];\n    let unsortedArray = array.slice();\n\n    sort(turnsArray, unsortedArray, 0, unsortedArray.length - 1);\n\n    return turnsArray;\n}\n\nconst sort = (turns, array, low, high) => {\n    if (low < high) {\n        let pivot = partition(turns, array, low, high);\n        sort(turns, array, low, pivot - 1);\n        sort(turns, array, pivot + 1, high);\n    }\n}\n\nconst partition = (turns, array, low, high) => {\n    let pivot = array[low];\n    let index = low;\n\n    for (let i = low; i <= high; i++) {\n        if (array[i] <= pivot) {\n            let temp = array[index];\n            array[index] = array[i];\n            array[i] = temp;\n            turns.push([i, index]);\n            index++;\n        } else {\n            turns.push([index, i]);\n        }\n    }\n\n    let temp = array[index - 1];\n    array[index - 1] = array[low];\n    array[low] = temp;\n    turns.push([index - 1, low]);\n\n    return index - 1;\n}\n\nexport default QuickSort;","function MergeSort(array) {\n    let turnsArray = [];\n    let unsortedArray = array.slice();\n    let indexArray = [];\n\n    for (let i = 0; i < unsortedArray.length; i++) {\n        indexArray[i] = [i, unsortedArray[i]];\n    }    \n\n    sort(turnsArray, indexArray);\n\n    return turnsArray;\n}\n\nconst sort = (turns, array) => {\n\n    if (array.length <= 1) {\n        return array;\n    }\n\n    let middle = (array.length / 2);\n    let leftArray  = array.slice(0, middle);\n    let rightArray = array.slice(middle);\n\n    return merge(turns, sort(turns, leftArray), sort(turns, rightArray));\n}\n\nconst merge = (turns, left, right) => {\n\n    let newArray = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n    \n    while (leftIndex < left.length && rightIndex < right.length) {\n        if (left[leftIndex][1] < right[rightIndex][1]) {\n            turns.push([left[leftIndex][0], right[rightIndex][0]]);\n            newArray.push(left[leftIndex]);\n            leftIndex++;\n        } else {\n            turns.push([right[rightIndex][0], left[leftIndex][0]]);\n            let temp = left[leftIndex][0];\n            left[leftIndex][0] = right[rightIndex][0];\n            right[rightIndex][0] = temp;\n            newArray.push(right[rightIndex]);\n            rightIndex++;\n        }\n    }\n\n    while (leftIndex < left.length) {\n        turns.push([left[leftIndex][0], left[leftIndex][0]]);\n        newArray.push(left[leftIndex]);\n        leftIndex++;\n    }\n\n    while (rightIndex < right.length) {\n        turns.push([right[rightIndex][0], right[rightIndex][0]]);\n        newArray.push(right[rightIndex]);\n        rightIndex++;\n    }\n\n    // return newArray.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n    return newArray;\n    \n}\n\nexport default MergeSort;","import React from 'react';\nimport './Visualizer.css';\nimport BubbleSort from '../SortingAlgorithms/BubbleSort';\nimport InsertionSort from '../SortingAlgorithms/InsertionSort';\nimport SelectionSort from '../SortingAlgorithms/SelectionSort';\nimport QuickSort from '../SortingAlgorithms/QuickSort';\nimport MergeSort from '../SortingAlgorithms/MergeSort';\nconst { useState, useEffect } = React;\n\n\nconst Visualizer = () => {\n    const [numberOfBars, setNumberOfBars] = useState(50);\n    const [randomArray, setRandomArray] = useState([]);\n    let timerSpeed = 1000;\n\n    useEffect(() => { \n        randomizeArray();\n    }, []);\n\n    const valueChange = (evt) => {\n        setNumberOfBars(evt.target.value);\n    }\n\n    const randomizeArray = () => {\n        const arrayDivs = document.getElementsByClassName('random-div');\n        for (let x = 0; x < arrayDivs.length; x++) {\n            arrayDivs[x].style.backgroundColor = \"#189AB4\";\n        }\n        let array = [];\n        for (let i = 0; i < numberOfBars; i++) {\n            array.push(Math.floor((Math.random() * 100) + 1));\n        }\n        setRandomArray(array);\n    }\n\n    const updateSortedArray = (algorithm) => {\n        let array;\n        switch (algorithm) {\n            case \"BubbleSort\":\n                array = BubbleSort(randomArray);\n                break;\n            case \"InsertionSort\":\n                array = InsertionSort(randomArray);\n                break;\n            case \"SelectionSort\":\n                array = SelectionSort(randomArray);\n                break;\n            case \"QuickSort\":\n                array = QuickSort(randomArray);\n                break;\n            case \"MergeSort\":\n                array = MergeSort(randomArray);\n                break;\n            default:\n                array = BubbleSort(randomArray);\n            break;\n        }\n        console.log(array);\n        const arrayDivs = document.getElementsByClassName('random-div');\n        for (let i = 0; i < array.length; i++) {\n            let  [firstEl, secondEl] = array[i];\n            const timeout = setTimeout(() => {\n                for (let x = 0; x < arrayDivs.length; x++) {\n                    arrayDivs[x].style.backgroundColor = \"#189AB4\";\n                }\n                arrayDivs[firstEl].style.backgroundColor = 'black';\n                arrayDivs[secondEl].style.backgroundColor = 'white';\n            }, i * timerSpeed);\n            if (firstEl > secondEl) {\n                const timeout2 = setTimeout(() => {\n                    [arrayDivs[firstEl].style.height, arrayDivs[secondEl].style.height] = [arrayDivs[secondEl].style.height, arrayDivs[firstEl].style.height];\n                    arrayDivs[firstEl].style.backgroundColor = 'white';\n                    arrayDivs[secondEl].style.backgroundColor = 'black';\n                }, i * timerSpeed);\n            }\n        }\n    }\n\n    return (\n        <div id='parent-container'>\n            <header className='header'>\n                <h1>{numberOfBars}</h1>\n                <input type= 'range' min= '3' max= '100' value= {numberOfBars} onChange= {(evt) => {valueChange(evt)}}/>\n                <button id='arraybtn' onClick={() => {randomizeArray()}}>New Array</button>\n                <button onClick={() => {updateSortedArray(\"BubbleSort\")}}>BubbleSort</button>\n                <button onClick={() => {updateSortedArray(\"InsertionSort\")}}>InsertionSort</button>\n                <button onClick={() => {updateSortedArray(\"SelectionSort\")}}>SelectionSort</button>\n                <button onClick={() => {updateSortedArray(\"QuickSort\")}}>QuickSort</button>\n                {/* <button onClick={() => {updateSortedArray(\"MergeSort\")}}>MergeSort</button> */}\n            </header>\n            <div className='array-container'>\n                {randomArray.map((value, idx) => (\n                <div className='random-div' key={idx} style={{height: `${value}%`}}></div>\n            ))}\n        </div>\n    </div>\n    )\n\n}\n\nexport default Visualizer;","import './App.css';\nimport Visualizer from './Visualizer/Visualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer></Visualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}